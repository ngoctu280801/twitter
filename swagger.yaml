openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:3030/api
    description: verion 1
tags:
  - name: auth
    description: Auth api
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      description: Login
      operationId: login
      requestBody:
        description: Login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginBody'
        required: true
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAuthentication'

        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user/me:
    get:
      tags:
        - user
      summary: get me
      description: get profile
      operationId: getMe
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'

        '400':
          description: Invalid status value
        '401':
          description: Unauthorized
      security:
        - BearerAuth: []

components:
  schemas:
    LoginBody:
      properties:
        email:
          type: string
          example: ngoctu.280801@gmail.com
        password:
          type: string
          example: Abc1234@
    SuccessAuthentication:
      type: object
      properties:
        access_token:
          type: string
          example: token access token
        refresh_token:
          type: string
          example: example refresh token
    UserDetail:
      type: object
      properties:
        _id:
          type: string
          example: 6561c23f6d2cb5e9f548c55a
        name:
          type: string
          example: name
        email:
          type: string
          example: ngoctu.280801@gmail.com
        date_of_birth:
          type: string
          format: ISO8601
          example: 2023-10-27T16:11:26.709Z
        created_at:
          type: string
          format: ISO8601
          example: 2023-10-27T16:11:26.709Z
        updated_at:
          type: string
          format: ISO8601
          example: 2023-10-27T16:11:26.709Z
        email_verify_token:
          type: string
          example:
        forgot_password_token:
          type: string
          example:
        verify:
          $ref: '#/components/schemas/UserVerifyStatus'
        bio:
          type: string
          example: bio
        location:
          type: string
          example: location
        website:
          type: string
          example: website
        username:
          type: string
          example: username
        avatar:
          type: string
          example: avatar
        cover_photo:
          type: string
          example: cover_photo
        tweet_circle:
          type: array
          items:
            type: string
          example: []
    UserVerifyStatus:
      type: number
      enum: [Unverified, Verified, Banned]
      example: 1
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
